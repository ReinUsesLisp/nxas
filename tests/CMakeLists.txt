add_executable(nxas_tester tester.cpp)
target_link_libraries(nxas_tester nxas_lib)
target_include_directories(nxas_tester PRIVATE nxas_lib)

set(tests
    "0xefa0000000000000 @P0 AL2P P0, R0, R0"
    "0xefa0000000100000 @P0 AL2P P0, R0, R0, 0x1"
    "0xefa000007ff00000 @P0 AL2P P0, R0, R0, -0x1"
    "0xefa000007fe00000 @P0 AL2P P0, R0, R0, -0x2"
    "0xefa0000040000000 @P0 AL2P P0, R0, R0, -0x400"
    "0xefa000003ff00000 @P0 AL2P P0, R0, R0, 0x3ff"
    "0xefa170000147ff00 AL2P.96 R0, 0x14"
    "0xefa1700001070500 AL2P.96 R0, R5, 0x10"
    "0xefa120000107ff00 AL2P.96 P2, R0, 0x10"
    "0xefa130003ff70500 AL2P.96 P3, R0, R5, 0x3ff"
    "0xefa1300000070500 AL2P.96 P3, R0, R5"
    "0xefa070010007ff00 AL2P.O R0"
    "0xefa070013ff7ffff AL2P.O RZ, 0x3ff"
    "0xefa070013f47ffff AL2P.O RZ, 0x3f4"
    "0xefa0c0007fb70500 AL2P.64 P4, R0, R5, -0x5"
    "0xefa1c00000170500 AL2P.128 P4, R0, R5, 1"
    "0xefd87f800707ff00 ALD R0, a[0x70]"
    "0xefd804000707ff00 ALD R0, a[0x70], R8"
    "0xefd87f8087070100 ALD.P R0, a[R1+0x70]"
    "0xefd80400f9070100 ALD.P R0, a[R1+-0x70], R8"
    "0xefd80400f9070100 ALD.P R0, a[R1+-0x70], R8"
    "0xefd87f8000070500 ALD.PHYS R0, a[R5]"
    "0xefd8040000070500 ALD.PHYS R0, a[R5], R8"
    "0xefd8840100070500 ALD.O.PHYS.64 R0, a[R5], R8"
    "0xefd9040100070500 ALD.O.PHYS.96 R0, a[R5], R8"
    "0xefd9840100070500 ALD.O.PHYS.128 R0, a[R5], R8"
    "0xeff07f800707ff00 AST a[0x70], R0"
    "0xeff004000707ff00 AST a[0x70], R0, R8"
    "0xeff07f8087070100 AST.P a[R1+0x70], R0"
    "0xeff0ff80f9070103 AST.P.64 a[R1+-0x70], R3"
    "0xeff07f8000070500 AST.PHYS a[R5], R0"
    "0xeff0040000070500 AST.PHYS a[R5], R0, R8"
    "0xeff0ff800707ff00 AST.64 a[0x70], R0"
    "0xeff17f800707ff00 AST.96 a[0x70], R0"
    "0xeff1ff800707ff00 AST.128 a[0x70], R0"
    "0xf0b800000007de04 B2R R4, 0xde"
    "0xf0b8000e0007ff06 B2R.WARP R6"
    "0xf0b8800d0007ff06 B2R.RESULT R6, P4"
    "0x3900817215370904 BFE.U32.BREV R4.CC, R9, -0xdead"
    "0x4c01011000c702ff BFE.BREV RZ, R2, c[0x4][0x30]"
    "0x5c00000000470304 BFE.U32 R4, R3, R4"
    "0x5bf0020000370201 BFI R1, R2, R3, R4"
    "0x5bf0820000370201 BFI R1.CC, R2, R3, R4"
    "0x53f081a000170201 BFI R1.CC, R2, R3, c[0x8][0x4]"
    "0x4bf081a000170201 BFI R1.CC, R2, c[0x8][0x4], R3"
    "0x36f0818cafe70201 BFI R1.CC, R2, 0xcafe, R3"
    "0xe3a0000dead70000 BPT.DRAIN_ILLEGAL 0xdead"
    "0xe3a0000006370040 BPT.CAL 0x63"
    "0xe3a0000000470080 BPT.PAUSE 0x4"
    "0xe3a0000cafe700c0 BPT.TRAP 0xcafe"
    "0xe3a0000002b70100 BPT.INT 0x2b"
    "0xe3a0000002270140 BPT.DRAIN 0x22"
    "0xe3a0000000070140 BPT.DRAIN"
    "0x50b0000000070f00 NOP"
    "0x50b0000000072f00 NOP.TRIG"
    "0x50b0000000070000 NOP CC.F"
    "0x50b0000000070100 NOP CC.LT"
    "0x50b0000000070200 NOP CC.EQ"
    "0x50b0000000070300 NOP CC.LE"
    "0x50b0000000070400 NOP CC.GT"
    "0x50b0000000070500 NOP CC.NE"
    "0x50b0000000070600 NOP CC.GE"
    "0x50b0000000070700 NOP CC.NUM"
    "0x50b0000000070800 NOP CC.NAN"
    "0x50b0000000070900 NOP CC.LTU"
    "0x50b0000000070a00 NOP CC.EQU"
    "0x50b0000000070b00 NOP CC.LEU"
    "0x50b0000000070c00 NOP CC.GTU"
    "0x50b0000000070d00 NOP CC.NEU"
    "0x50b0000000070e00 NOP CC.GEU"
    "0x50b0000000070f00 NOP CC.T"
    "0x50b0000000071000 NOP CC.OFF"
    "0x50b0000000071100 NOP CC.LO"
    "0x50b0000000071200 NOP CC.SFF"
    "0x50b0000000071300 NOP CC.LS"
    "0x50b0000000071400 NOP CC.HI"
    "0x50b0000000071500 NOP CC.SFT"
    "0x50b0000000071600 NOP CC.HS"
    "0x50b0000000071700 NOP CC.OFT"
    "0x50b0000000071800 NOP CC.CSM_TA"
    "0x50b0000000071900 NOP CC.CSM_TR"
    "0x50b0000000071a00 NOP CC.CSM_MX"
    "0x50b0000000071b00 NOP CC.FCSM_TA"
    "0x50b0000000071c00 NOP CC.FCSM_TR"
    "0x50b0000000071d00 NOP CC.FCSM_MX"
    "0x50b0000000071e00 NOP CC.RLE"
    "0x50b0000000071f00 NOP CC.RGT"
    "0x50b0000000370000 NOP 0x3"
    "0x50b0000008071000 NOP CC.OFF, 0x80"
    "0x5c98078000170000 MOV R0, R1"
    "0x5c9802800ff700ff MOV RZ, RZ, 0x5"
    "0x4c98078c00870008 MOV R8, c[0x3][0x20]"
    "0x4c98044002470002 MOV R2, c[0x10][0x90], 0x8"
    "0x3898078003d70001 MOV R1, 0x3d"
    "0x3998047f5d070002 MOV R2, -0xa30, 0x8"
    "0x010aaccddee7f000 MOV32I R0, 0xaaccddee"
    "0x010deadbeef780ff MOV32I RZ, 0xdeadbeef, 0x8"
    "0x5085400000070304 MUFU.COS.SAT R4, -|R3|"
    "0x5084000000170304 MUFU.SIN.SAT R4, R3"
    "0x5084000000270304 MUFU.EX2.SAT R4, R3"
    "0x5084000000370304 MUFU.LG2.SAT R4, R3"
    "0x5084000000470304 MUFU.RCP.SAT R4, R3"
    "0x5084000000570304 MUFU.RSQ.SAT R4, R3"
    "0x5084000000670304 MUFU.RCP64H.SAT R4, R3"
    "0x5085000000770304 MUFU.RSQ64H.SAT R4, -R3"
    "0x5084400000870304 MUFU.SQRT.SAT R4, |R3|"
    "0x5c5800000ff7ffff FADD RZ, RZ, RZ"
    "0x5c58100000870300 FADD.FTZ R0, R3, R8"
    "0x5c5891000ff70100 FADD.FTZ.RP R0.CC, R1, RZ"
    "0x5c5d40000007ff00 FADD.SAT R0, -|RZ|, R0"
    "0x5c598080000700ff FADD.RM RZ.CC, -R0, R0"
    "0x5c584180000700ff FADD.RZ RZ, |R0|, R0"
    "0x5c582000001700ff FADD RZ, R0, -R1"
    "0x5c5a0000001700ff FADD RZ, R0, |R1|"
    "0x4c5800002b87ffff FADD RZ, RZ, c[0x0][0xae0]"
    "0x4c5ca09002b7ffff FADD.RM.SAT RZ.CC, RZ, -c[0x4][0xac]"
    "0x4c5a000000070100 FADD R0, R1, |c[0x0][0x0]|"
    "0x3858100000070000 FADD.FTZ R0, R0, 0.0"
    "0x3858103f80070000 FADD.FTZ R0, R0, 1.0"
    "0x3858104000070000 FADD.FTZ R0, R0, 2.0"
    "0x3858104248070000 FADD.FTZ R0, R0, 50"
    "0x3958103f80070000 FADD.FTZ R0, R0, -1.0"
    "0x3858103fc0070000 FADD.FTZ R0, R0, 1.5"
    "0x0bfc010000070804 FADD32I.FTZ R4.CC, -|R8|, -2.25 .NEG.ABS"
    "0x582822000ff70405 FSET.NAN.OR R5, R4, -RZ, P4"
    "0x58083a000ff70405 FSET.NAN.OR R5, -R4, |RZ|, P4"
    "0x586e32000ff70405 FSET.GEU.OR R5, |R4|, -|RZ|, P4"
    "0x58f89e000ff70405 FSET.BF.NAN.FTZ.AND R5.CC, -|R4|, -|RZ|, !P4"
    "0x48f89e1000470405 FSET.BF.NAN.FTZ.AND R5.CC, -|R4|, -|c[0x4][0x10]|, !P4"
    "0x31f89e4040070405 FSET.BF.NAN.FTZ.AND R5.CC, -|R4|, -3 .NEG.ABS, !P4"
    "0x5bb0020000370201 FSETP.F.AND P0, P1, R2, R3, P4"
    "0x5bb0060000370201 FSETP.F.AND P0, P1, R2, R3, !P4"
    "0x5bb0220000370201 FSETP.F.OR P0, P1, R2, R3, P4"
    "0x5bb0420000370201 FSETP.F.XOR P0, P1, R2, R3, P4"
    "0x5bb02a0000370201 FSETP.F.OR P0, P1, -R2, R3, P4"
    "0x5bb0220000370281 FSETP.F.OR P0, P1, |R2|, R3, P4"
    "0x5bb0220000370241 FSETP.F.OR P0, P1, R2, -R3, P4"
    "0x5bb0320000370201 FSETP.F.OR P0, P1, R2, |R3|, P4"
    "0x5bb123800ff7ff3f FSETP.LT.OR PT, PT, RZ, RZ, PT"
    "0x5bb223800ff7ff3f FSETP.EQ.OR PT, PT, RZ, RZ, PT"
    "0x5bb323800ff7ff3f FSETP.LE.OR PT, PT, RZ, RZ, PT"
    "0x5bb423800ff7ff3f FSETP.GT.OR PT, PT, RZ, RZ, PT"
    "0x5bb523800ff7ff3f FSETP.NE.OR PT, PT, RZ, RZ, PT"
    "0x5bb623800ff7ff3f FSETP.GE.OR PT, PT, RZ, RZ, PT"
    "0x5bb723800ff7ff3f FSETP.NUM.OR PT, PT, RZ, RZ, PT"
    "0x5bb823800ff7ff3f FSETP.NAN.OR PT, PT, RZ, RZ, PT"
    "0x5bb923800ff7ff3f FSETP.LTU.OR PT, PT, RZ, RZ, PT"
    "0x5bba23800ff7ff3f FSETP.EQU.OR PT, PT, RZ, RZ, PT"
    "0x5bbb23800ff7ff3f FSETP.LEU.OR PT, PT, RZ, RZ, PT"
    "0x5bbc23800ff7ff3f FSETP.GTU.OR PT, PT, RZ, RZ, PT"
    "0x5bbd23800ff7ff3f FSETP.NEU.OR PT, PT, RZ, RZ, PT"
    "0x5bbe23800ff7ff3f FSETP.GEU.OR PT, PT, RZ, RZ, PT"
    "0x5bbf23800ff7ff3f FSETP.T.OR PT, PT, RZ, RZ, PT"
    "0x37bf23c0b007083f FSETP.T.OR PT, PT, R8, -5.5, PT"
    "0x5cc0010000170007 IADD3 R7, R0, R1, R2"
    "0x5cc2010000170007 IADD3 R7, R0, R1, -R2"
    "0x5cc6010000170007 IADD3 R7, R0, -R1, -R2"
    "0x5cce010000170007 IADD3 R7, -R0, -R1, -R2"
    "0x5cc7814c80170007 IADD3.RS.X R7.CC, R0.H0, -R1.H1, -R2.H0"
    "0x5cc7813300170007 IADD3.LS.X R7.CC, R0.H1, -R1.H0, -R2.H1"
    "0x4cc1808000170007 IADD3.X R7.CC, R0, c[0x0][0x4], R1"
    "0x4cc3808400170007 IADD3.X R7.CC, R0, c[0x1][0x4], -R1"
    "0x4cc9808800170007 IADD3.X R7.CC, -R0, c[0x2][0x4], R1"
    "0x4cc5808c00170007 IADD3.X R7.CC, R0, -c[0x3][0x4], R1"
    "0x39c57f8deadfffff @!PT IADD3.X RZ, RZ, 0x8dead .NEG, RZ"
    "0x1c7000000057ffff IADD32I.SAT.X RZ.CC, RZ, 0x5"
    "0x1dddeadbeef7ffff IADD32I.PO.SAT RZ.CC, RZ, -0x21524111"
    "0x1d10000cccc70205 IADD32I R5.CC, -R2, 0xcccc"
    "0x5b4a038000670504 ICMP.NE.U32 R4, R5, R6, R7"
    "0x534c038800070504 ICMP.GE.U32 R4, R5, R7, c[0x2][0x0]"
    "0x534e030800070504 ICMP.T.U32 R4, R5, R6, c[0x2][0x0]"
    "0x3644038cafe70504 ICMP.EQ.U32 R4, R5, 0xcafe, R7"
    "0x5c20950000270704 IMNMX.U32.XMED R4.CC, R7, R2, !P2"
    "0x4c209d0800070704 IMNMX.U32.XHI R4.CC, R7, c[0x2][0x0], !P2"
    "0x39208d7050670704 IMNMX.U32.XLO R4.CC, R7, -0xfafa, !P2"
    "0x5b54de8000570403 ISET.BF.EQ.U32.X.XOR R3.CC, R4, R5, !P5"
    "0x4b54de8800270405 ISET.BF.EQ.U32.X.XOR R5.CC, R4, c[0x2][0x8], !P5"
    "0x37541ef3502705e6 ISET.BF.EQ.U32.X.AND R230, R5, -0xcafe, !P5"
    "0x5b60018000170007 ISETP.F.U32.AND P0, PT, R0, R1, P3"
    "0x5b62018000170007 ISETP.LT.U32.AND P0, PT, R0, R1, P3"
    "0x5b64018000170007 ISETP.EQ.U32.AND P0, PT, R0, R1, P3"
    "0x5b66018000170007 ISETP.LE.U32.AND P0, PT, R0, R1, P3"
    "0x5b68018000170007 ISETP.GT.U32.AND P0, PT, R0, R1, P3"
    "0x5b6a018000170007 ISETP.NE.U32.AND P0, PT, R0, R1, P3"
    "0x5b6c018000170007 ISETP.GE.U32.AND P0, PT, R0, R1, P3"
    "0x5b6e018000170007 ISETP.T.U32.AND P0, PT, R0, R1, P3"
    "0x4b60008000070007 ISETP.F.U32.AND P0, PT, R0, c[0x0][0x0], P1"
    "0x4b62410000070007 ISETP.LT.U32.XOR P0, PT, R0, c[0x0][0x0], P2"
    "0x4b64018000070007 ISETP.EQ.U32.AND P0, PT, R0, c[0x0][0x0], P3"
    "0x4b66020000070007 ISETP.LE.U32.AND P0, PT, R0, c[0x0][0x0], P4"
    "0x4b68028000070007 ISETP.GT.U32.AND P0, PT, R0, c[0x0][0x0], P5"
    "0x4b6a030000070007 ISETP.NE.U32.AND P0, PT, R0, c[0x0][0x0], P6"
    "0x4b6c200000070007 ISETP.GE.U32.OR P0, PT, R0, c[0x0][0x0], P0"
    "0x4b6e478000070007 ISETP.T.U32.XOR P0, PT, R0, c[0x0][0x0], !PT"
    "0x36600580c3470007 ISETP.F.U32.AND P0, PT, R0, 0xc34, !P3"
    "0x376005ff3cc70007 ISETP.F.U32.AND P0, PT, R0, -0xc34, !P3"
    "0x5baf01000ff70000 FCMP.T R0, R0, RZ, R2"
    "0x4ba5010400170000 FCMP.NE R0, R0, c[0x1][0x4], R2"
    "0x53a8011000270000 FCMP.NAN R0, R0, R2, c[0x4][0x8]"
    "0x37a1814200070000 FCMP.LT.FTZ R0, R0, -32, R2"
    "0x59838480003705ff FFMA RZ.CC, R5, -R3, -R9"
    "0x49838480001705ff FFMA RZ.CC, R5, -c[0x0][0x4], -R9"
    "0x51838200001705ff FFMA RZ.CC, R5, -R4, -c[0x0][0x4]"
    "0x328082bf000705ff FFMA RZ.CC, R5, 0.5, R5"
    "0x0e343e4000070503 FFMA32I.FTZ R3.CC, R5, 456, -R3"
    "0x0d443e4000070503 FFMA32I.FMZ R3, -R5, 456, R3"
    "0x5c60038000370201 FMNMX R1, R2, R3, PT"
    "0x5c62830000370201 FMNMX R1.CC, R2, |R3|, P6"
    "0x5c60a28000370201 FMNMX R1.CC, R2, -R3, P5"
    "0x5c61820000370201 FMNMX R1.CC, -R2, R3, P4"
    "0x5c60c58000370201 FMNMX R1.CC, |R2|, R3, !P3"
    "0x4c63300000170302 FMNMX.FTZ R2, -R3, -|c[0x0][0x4]|, P0"
    "0x396117c090070302 FMNMX.FTZ R2, -R3, -4.5, !PT"
    "0x396337c090070302 FMNMX.FTZ R2, -R3, -4.5.NEG.ABS, !PT"
    "0x5c6da58000470203 FMUL.FMZ.D4.RZ.SAT R3.CC, R2, -R4"
    "0x39691041b80700ff FMUL.FTZ RZ, R0, -23 .NEG"
    "0x4c691000001700ff FMUL.FTZ RZ, R0, -c[0x0][0x4]"
    "0x39691e41b80700ff FMUL.FTZ.INVALIDSCALE37 RZ, R0, -23 .NEG"
    "0x1ec4209000070100 FMUL32I.FMZ.SAT R0, R1, 34.25"
    "0x36bf33ff8007027f FSETP.T.OR PT, PT, R2, INF .NEG.ABS, PT"
    "0x37bf23ff8007037f FSETP.T.OR PT, PT, R3, -INF .NEG, PT"
    "0x36bf33ffc007053f FSETP.T.OR PT, PT, R5, +QNAN .ABS, PT"
    "0x37bf23ffc007043f FSETP.T.OR PT, PT, R4, -QNAN, PT"
    "0x39a8004201970a00 F2F R0, -32.390625"
    "0x38aa207fc0070a00 F2F R0, QNAN.NEG.ABS"
    "0x5ca8200000470a00 F2F R0, -R4"
    "0x4ca8800000170a03 F2F R3.CC, c[0][4]"
    "0x5ca80000000709ff F2F.F16.F32 RZ, R0"
    "0x5ca82200000705ff F2F.F16.F16 RZ, -R0.H1"
    "0x5caa000000070bff F2F.F64.F32 RZ, |R0|"
    "0x5ca8000000170fff F2F.F64.F64 RZ, R1"
    "0x5ca8100000170fff F2F.FTZ.F64.F64 RZ, R1"
    "0x5ca804000ff70fff F2F.F64.F64.ROUND RZ, RZ"
    "0x5ca804800ff70fff F2F.F64.F64.FLOOR RZ, RZ"
    "0x5ca805000ff70fff F2F.F64.F64.CEIL RZ, RZ"
    "0x5ca805800ff70fff F2F.F64.F64.TRUNC RZ, RZ"
    "0x5ca800000ff70bff F2F.F64.F32.RN RZ, RZ"
    "0x5ca800800ff70bff F2F.F64.F32.RM RZ, RZ"
    "0x5ca801000ff70bff F2F.F64.F32.RP RZ, RZ"
    "0x5ca801800ff70bff F2F.F64.F32.RZ RZ, RZ"
    "0x5cac15800ff70fff F2F.FTZ.F64.F64.TRUNC.SAT RZ, RZ"
    "0x5c443e0000570206 LOP.PASS_B.X.NZ P4, R6, R2, R5"
    "0x5c441e8000570206 LOP.PASS_B.X.T P4, R6, ~R2, R5"
    "0x5c44af0000570206 LOP.PASS_B.X.Z P4, R6.CC, R2, ~R5"
    "0x4c44840800070206 LOP.XOR P4, R6.CC, R2, c[0x2][0x0]"
    "0x38450000062702ff LOP.AND P5, RZ, R2, 0x62"
    "0x5be7ffffffffffff @!PT LOP3.LUT.X.NZ RZ.CC, RZ, RZ, RZ, 0xff"
    "0x3cffffffffffffff @!PT LOP3.LUT RZ.CC, RZ, 0x7ffff, RZ, 0xff"
    "0x02ffffffffffffff @!PT LOP3.LUT RZ.CC, RZ, c[0x1f][-0x4], RZ, 0xff"
    "0x5c90000000270004 RRO.SINCOS R4, R2"
    "0x5c92208000170005 RRO.EX2 R5, -|R1|"
    "0x4c92008000170005 RRO.EX2 R5, |c[0x0][0x4]|"
    "0x389220c0a8070005 RRO.EX2 R5, 5.25 .NEG.ABS"
    "0x5ca0060000270100 SEL R0, R1, R2, !P4"
    "0x4ca0038000170100 SEL R0, R1, c[0x0][0x4], PT"
    "0x38a0020004070100 SEL R0, R1, 0x40, P4"
    "0x5c488080001700ff SHL.W RZ.CC, R0, R1"
    "0x5c488800001700ff SHL.X RZ.CC, R0, R1"
    "0x5c480000001700ff SHL RZ, R0, R1"
    "0x4c48000c000700ff SHL RZ, R0, c[0x3][0x0]"
    "0x3948007fffb702ff SHL RZ, R2, -0x5"
    "0x38480000005703ff SHL RZ, R3, 0x5"
    "0xe2400fffff87000f foo: BRA foo"
    "0xe2400fffff87000f Foo: BRA Foo"
)
set(failure_tests
    "F2F !R0, R1"
    "F2F R0, R255"
    "F2F R0, R256"
    "F2F A, RZ"
    "@P7 F2F RZ, RZ"
    "{: BRA {"
    "_: BRA _"
    "FADD R0, RZ, 13a.5"
    "I2I.U32.U32 RZ, 5k"
    "BRA foo"
    "NOP @Y @Y"
    "NOP @INVALID"
    "NOP @DEP 0 @DEP 1 @DEP 0"
    "NOP @DEP 6"
    "NOP @WB -1"
    "NOP @WB 6"
    "NOP @RB -1"
    "NOP @RB 6"
    "NOP @RB -322"
    "NOP @WAIT 16"
    "NOP @WAIT -1"
    "NOP @WAIT 5 @WAIT 0"
    "NOP @WAIT id"
    "NOP @DEP -1"
    "0x0d443e4000070503 FFMA32I.FMZ R3, -R5, 456, R4" # not mirrored
)

set(test_counter 1)
foreach(test IN LISTS tests)
    string(FIND ${test} " " space_pos)
    string(LENGTH ${test} test_len)
    math(EXPR expression_len "${test_len} - ${space_pos}")
    math(EXPR expression_begin "${space_pos} + 1")
    string(SUBSTRING ${test} 0 ${space_pos} expected)
    string(SUBSTRING ${test} ${expression_begin} ${expression_len} expression)
    add_test(NAME "Test_${test_counter}" COMMAND nxas_tester "${expression}" "${expected}")
    math(EXPR test_counter "${test_counter} + 1")
endforeach()

foreach(test IN LISTS failure_tests)
    set(name "Test_${test_counter}")
    add_test(NAME ${name} COMMAND nxas_tester "${test}")
    set_tests_properties(${name} PROPERTIES WILL_FAIL true)
    math(EXPR test_counter "${test_counter} + 1")
endforeach()
